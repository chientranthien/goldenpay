// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: internal/proto/chat_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	// Channel management
	CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*CreateChannelResp, error)
	GetChannel(ctx context.Context, in *GetChannelReq, opts ...grpc.CallOption) (*GetChannelResp, error)
	ListChannels(ctx context.Context, in *ListChannelsReq, opts ...grpc.CallOption) (*ListChannelsResp, error)
	JoinChannel(ctx context.Context, in *JoinChannelReq, opts ...grpc.CallOption) (*JoinChannelResp, error)
	LeaveChannel(ctx context.Context, in *LeaveChannelReq, opts ...grpc.CallOption) (*LeaveChannelResp, error)
	// Message management
	SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error)
	GetMessages(ctx context.Context, in *GetMessagesReq, opts ...grpc.CallOption) (*GetMessagesResp, error)
	UpdateMessage(ctx context.Context, in *UpdateMessageReq, opts ...grpc.CallOption) (*UpdateMessageResp, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageReq, opts ...grpc.CallOption) (*DeleteMessageResp, error)
	// Direct messages
	CreateDirectMessage(ctx context.Context, in *CreateDirectMessageReq, opts ...grpc.CallOption) (*CreateDirectMessageResp, error)
	GetDirectMessages(ctx context.Context, in *GetDirectMessagesReq, opts ...grpc.CallOption) (*GetDirectMessagesResp, error)
	// User presence
	UpdatePresence(ctx context.Context, in *UpdatePresenceReq, opts ...grpc.CallOption) (*UpdatePresenceResp, error)
	GetPresence(ctx context.Context, in *GetPresenceReq, opts ...grpc.CallOption) (*GetPresenceResp, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) CreateChannel(ctx context.Context, in *CreateChannelReq, opts ...grpc.CallOption) (*CreateChannelResp, error) {
	out := new(CreateChannelResp)
	err := c.cc.Invoke(ctx, "/ChatService/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChannel(ctx context.Context, in *GetChannelReq, opts ...grpc.CallOption) (*GetChannelResp, error) {
	out := new(GetChannelResp)
	err := c.cc.Invoke(ctx, "/ChatService/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListChannels(ctx context.Context, in *ListChannelsReq, opts ...grpc.CallOption) (*ListChannelsResp, error) {
	out := new(ListChannelsResp)
	err := c.cc.Invoke(ctx, "/ChatService/ListChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) JoinChannel(ctx context.Context, in *JoinChannelReq, opts ...grpc.CallOption) (*JoinChannelResp, error) {
	out := new(JoinChannelResp)
	err := c.cc.Invoke(ctx, "/ChatService/JoinChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) LeaveChannel(ctx context.Context, in *LeaveChannelReq, opts ...grpc.CallOption) (*LeaveChannelResp, error) {
	out := new(LeaveChannelResp)
	err := c.cc.Invoke(ctx, "/ChatService/LeaveChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	out := new(SendMessageResp)
	err := c.cc.Invoke(ctx, "/ChatService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetMessages(ctx context.Context, in *GetMessagesReq, opts ...grpc.CallOption) (*GetMessagesResp, error) {
	out := new(GetMessagesResp)
	err := c.cc.Invoke(ctx, "/ChatService/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateMessage(ctx context.Context, in *UpdateMessageReq, opts ...grpc.CallOption) (*UpdateMessageResp, error) {
	out := new(UpdateMessageResp)
	err := c.cc.Invoke(ctx, "/ChatService/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageReq, opts ...grpc.CallOption) (*DeleteMessageResp, error) {
	out := new(DeleteMessageResp)
	err := c.cc.Invoke(ctx, "/ChatService/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateDirectMessage(ctx context.Context, in *CreateDirectMessageReq, opts ...grpc.CallOption) (*CreateDirectMessageResp, error) {
	out := new(CreateDirectMessageResp)
	err := c.cc.Invoke(ctx, "/ChatService/CreateDirectMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetDirectMessages(ctx context.Context, in *GetDirectMessagesReq, opts ...grpc.CallOption) (*GetDirectMessagesResp, error) {
	out := new(GetDirectMessagesResp)
	err := c.cc.Invoke(ctx, "/ChatService/GetDirectMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdatePresence(ctx context.Context, in *UpdatePresenceReq, opts ...grpc.CallOption) (*UpdatePresenceResp, error) {
	out := new(UpdatePresenceResp)
	err := c.cc.Invoke(ctx, "/ChatService/UpdatePresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetPresence(ctx context.Context, in *GetPresenceReq, opts ...grpc.CallOption) (*GetPresenceResp, error) {
	out := new(GetPresenceResp)
	err := c.cc.Invoke(ctx, "/ChatService/GetPresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	// Channel management
	CreateChannel(context.Context, *CreateChannelReq) (*CreateChannelResp, error)
	GetChannel(context.Context, *GetChannelReq) (*GetChannelResp, error)
	ListChannels(context.Context, *ListChannelsReq) (*ListChannelsResp, error)
	JoinChannel(context.Context, *JoinChannelReq) (*JoinChannelResp, error)
	LeaveChannel(context.Context, *LeaveChannelReq) (*LeaveChannelResp, error)
	// Message management
	SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error)
	GetMessages(context.Context, *GetMessagesReq) (*GetMessagesResp, error)
	UpdateMessage(context.Context, *UpdateMessageReq) (*UpdateMessageResp, error)
	DeleteMessage(context.Context, *DeleteMessageReq) (*DeleteMessageResp, error)
	// Direct messages
	CreateDirectMessage(context.Context, *CreateDirectMessageReq) (*CreateDirectMessageResp, error)
	GetDirectMessages(context.Context, *GetDirectMessagesReq) (*GetDirectMessagesResp, error)
	// User presence
	UpdatePresence(context.Context, *UpdatePresenceReq) (*UpdatePresenceResp, error)
	GetPresence(context.Context, *GetPresenceReq) (*GetPresenceResp, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) CreateChannel(context.Context, *CreateChannelReq) (*CreateChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedChatServiceServer) GetChannel(context.Context, *GetChannelReq) (*GetChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedChatServiceServer) ListChannels(context.Context, *ListChannelsReq) (*ListChannelsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannels not implemented")
}
func (UnimplementedChatServiceServer) JoinChannel(context.Context, *JoinChannelReq) (*JoinChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedChatServiceServer) LeaveChannel(context.Context, *LeaveChannelReq) (*LeaveChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChannel not implemented")
}
func (UnimplementedChatServiceServer) SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServiceServer) GetMessages(context.Context, *GetMessagesReq) (*GetMessagesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedChatServiceServer) UpdateMessage(context.Context, *UpdateMessageReq) (*UpdateMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedChatServiceServer) DeleteMessage(context.Context, *DeleteMessageReq) (*DeleteMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedChatServiceServer) CreateDirectMessage(context.Context, *CreateDirectMessageReq) (*CreateDirectMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectMessage not implemented")
}
func (UnimplementedChatServiceServer) GetDirectMessages(context.Context, *GetDirectMessagesReq) (*GetDirectMessagesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectMessages not implemented")
}
func (UnimplementedChatServiceServer) UpdatePresence(context.Context, *UpdatePresenceReq) (*UpdatePresenceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePresence not implemented")
}
func (UnimplementedChatServiceServer) GetPresence(context.Context, *GetPresenceReq) (*GetPresenceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresence not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateChannel(ctx, req.(*CreateChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChannel(ctx, req.(*GetChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/ListChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListChannels(ctx, req.(*ListChannelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/JoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).JoinChannel(ctx, req.(*JoinChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/LeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).LeaveChannel(ctx, req.(*LeaveChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*SendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetMessages(ctx, req.(*GetMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateMessage(ctx, req.(*UpdateMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteMessage(ctx, req.(*DeleteMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateDirectMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirectMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateDirectMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/CreateDirectMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateDirectMessage(ctx, req.(*CreateDirectMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetDirectMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetDirectMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/GetDirectMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetDirectMessages(ctx, req.(*GetDirectMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdatePresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePresenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdatePresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/UpdatePresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdatePresence(ctx, req.(*UpdatePresenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPresenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/GetPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetPresence(ctx, req.(*GetPresenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _ChatService_CreateChannel_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _ChatService_GetChannel_Handler,
		},
		{
			MethodName: "ListChannels",
			Handler:    _ChatService_ListChannels_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _ChatService_JoinChannel_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _ChatService_LeaveChannel_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _ChatService_GetMessages_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _ChatService_UpdateMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ChatService_DeleteMessage_Handler,
		},
		{
			MethodName: "CreateDirectMessage",
			Handler:    _ChatService_CreateDirectMessage_Handler,
		},
		{
			MethodName: "GetDirectMessages",
			Handler:    _ChatService_GetDirectMessages_Handler,
		},
		{
			MethodName: "UpdatePresence",
			Handler:    _ChatService_UpdatePresence_Handler,
		},
		{
			MethodName: "GetPresence",
			Handler:    _ChatService_GetPresence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/chat_service.proto",
}
